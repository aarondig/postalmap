{"version":3,"file":"static/js/137.2395d0c7.chunk.js","mappings":"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","sources":["../node_modules/react-swipeable/src/types.ts","../node_modules/react-swipeable/src/index.ts","routes/mobile/pages/home/index.js"],"sourcesContent":["import * as React from \"react\";\n\nexport const LEFT = \"Left\";\nexport const RIGHT = \"Right\";\nexport const UP = \"Up\";\nexport const DOWN = \"Down\";\nexport type HandledEvents = React.MouseEvent | TouchEvent | MouseEvent;\nexport type Vector2 = [number, number];\nexport type SwipeDirections =\n  | typeof LEFT\n  | typeof RIGHT\n  | typeof UP\n  | typeof DOWN;\nexport interface SwipeEventData {\n  /**\n   * Absolute displacement of swipe in x. Math.abs(deltaX);\n   */\n  absX: number;\n  /**\n   * Absolute displacement of swipe in y. Math.abs(deltaY);\n   */\n  absY: number;\n  /**\n   * Displacement of swipe in x. (current.x - initial.x)\n   */\n  deltaX: number;\n  /**\n   * Displacement of swipe in y. (current.y - initial.y)\n   */\n  deltaY: number;\n  /**\n   * Direction of swipe - Left | Right | Up | Down\n   */\n  dir: SwipeDirections;\n  /**\n   * Source event.\n   */\n  event: HandledEvents;\n  /**\n   * True for the first event of a tracked swipe.\n   */\n  first: boolean;\n  /**\n   * Location where swipe started - [x, y].\n   */\n  initial: Vector2;\n  /**\n   * \"Absolute velocity\" (speed) - âˆš(absX^2 + absY^2) / time\n   */\n  velocity: number;\n  /**\n   * Velocity per axis - [ deltaX/time, deltaY/time ]\n   */\n  vxvy: Vector2;\n}\n\nexport type SwipeCallback = (eventData: SwipeEventData) => void;\nexport type TapCallback = ({ event }: { event: HandledEvents }) => void;\n\nexport type SwipeableDirectionCallbacks = {\n  /**\n   * Called after a DOWN swipe\n   */\n  onSwipedDown: SwipeCallback;\n  /**\n   * Called after a LEFT swipe\n   */\n  onSwipedLeft: SwipeCallback;\n  /**\n   * Called after a RIGHT swipe\n   */\n  onSwipedRight: SwipeCallback;\n  /**\n   * Called after a UP swipe\n   */\n  onSwipedUp: SwipeCallback;\n};\n\nexport type SwipeableCallbacks = SwipeableDirectionCallbacks & {\n  /**\n   * Called at start of a tracked swipe.\n   */\n  onSwipeStart: SwipeCallback;\n  /**\n   * Called after any swipe.\n   */\n  onSwiped: SwipeCallback;\n  /**\n   * Called for each move event during a tracked swipe.\n   */\n  onSwiping: SwipeCallback;\n  /**\n   * Called after a tap. A touch under the min distance, `delta`.\n   */\n  onTap: TapCallback;\n  /**\n   * Called for `touchstart` and `mousedown`.\n   */\n  onTouchStartOrOnMouseDown: TapCallback;\n  /**\n   * Called for `touchend` and `mouseup`.\n   */\n  onTouchEndOrOnMouseUp: TapCallback;\n};\n\n// Configuration Options\nexport type ConfigurationOptionDelta =\n  | number\n  | { [key in Lowercase<SwipeDirections>]?: number };\n\nexport interface ConfigurationOptions {\n  /**\n   * Min distance(px) before a swipe starts. **Default**: `10`\n   */\n  delta: ConfigurationOptionDelta;\n  /**\n   * Prevents scroll during swipe in most cases. **Default**: `false`\n   */\n  preventScrollOnSwipe: boolean;\n  /**\n   * Set a rotation angle. **Default**: `0`\n   */\n  rotationAngle: number;\n  /**\n   * Track mouse input. **Default**: `false`\n   */\n  trackMouse: boolean;\n  /**\n   * Track touch input. **Default**: `true`\n   */\n  trackTouch: boolean;\n  /**\n   * Allowable duration of a swipe (ms). **Default**: `Infinity`\n   */\n  swipeDuration: number;\n  /**\n   * Options for touch event listeners\n   */\n  touchEventOptions: { passive: boolean };\n}\n\nexport type SwipeableProps = Partial<SwipeableCallbacks & ConfigurationOptions>;\n\nexport type SwipeablePropsWithDefaultOptions = Partial<SwipeableCallbacks> &\n  ConfigurationOptions;\n\nexport interface SwipeableHandlers {\n  ref(element: HTMLElement | null): void;\n  onMouseDown?(event: React.MouseEvent): void;\n}\n\nexport type SwipeableState = {\n  cleanUpTouch?: () => void;\n  el?: HTMLElement;\n  eventData?: SwipeEventData;\n  first: boolean;\n  initial: Vector2;\n  start: number;\n  swiping: boolean;\n  xy: Vector2;\n};\n\nexport type StateSetter = (\n  state: SwipeableState,\n  props: SwipeablePropsWithDefaultOptions\n) => SwipeableState;\nexport type Setter = (stateSetter: StateSetter) => void;\nexport type AttachTouch = (\n  el: HTMLElement,\n  props: SwipeablePropsWithDefaultOptions\n) => () => void;\n","/* global document */\nimport * as React from \"react\";\nimport {\n  AttachTouch,\n  SwipeDirections,\n  DOWN,\n  SwipeEventData,\n  HandledEvents,\n  LEFT,\n  RIGHT,\n  Setter,\n  ConfigurationOptions,\n  SwipeableDirectionCallbacks,\n  SwipeableHandlers,\n  SwipeableProps,\n  SwipeablePropsWithDefaultOptions,\n  SwipeableState,\n  SwipeCallback,\n  TapCallback,\n  UP,\n  Vector2,\n} from \"./types\";\n\nexport {\n  LEFT,\n  RIGHT,\n  UP,\n  DOWN,\n  SwipeDirections,\n  SwipeEventData,\n  SwipeableDirectionCallbacks,\n  SwipeCallback,\n  TapCallback,\n  SwipeableHandlers,\n  SwipeableProps,\n  Vector2,\n};\n\nconst defaultProps: ConfigurationOptions = {\n  delta: 10,\n  preventScrollOnSwipe: false,\n  rotationAngle: 0,\n  trackMouse: false,\n  trackTouch: true,\n  swipeDuration: Infinity,\n  touchEventOptions: { passive: true },\n};\nconst initialState: SwipeableState = {\n  first: true,\n  initial: [0, 0],\n  start: 0,\n  swiping: false,\n  xy: [0, 0],\n};\nconst mouseMove = \"mousemove\";\nconst mouseUp = \"mouseup\";\nconst touchEnd = \"touchend\";\nconst touchMove = \"touchmove\";\nconst touchStart = \"touchstart\";\n\nfunction getDirection(\n  absX: number,\n  absY: number,\n  deltaX: number,\n  deltaY: number\n): SwipeDirections {\n  if (absX > absY) {\n    if (deltaX > 0) {\n      return RIGHT;\n    }\n    return LEFT;\n  } else if (deltaY > 0) {\n    return DOWN;\n  }\n  return UP;\n}\n\nfunction rotateXYByAngle(pos: Vector2, angle: number): Vector2 {\n  if (angle === 0) return pos;\n  const angleInRadians = (Math.PI / 180) * angle;\n  const x =\n    pos[0] * Math.cos(angleInRadians) + pos[1] * Math.sin(angleInRadians);\n  const y =\n    pos[1] * Math.cos(angleInRadians) - pos[0] * Math.sin(angleInRadians);\n  return [x, y];\n}\n\nfunction getHandlers(\n  set: Setter,\n  handlerProps: { trackMouse: boolean | undefined }\n): [\n  {\n    ref: (element: HTMLElement | null) => void;\n    onMouseDown?: (event: React.MouseEvent) => void;\n  },\n  AttachTouch\n] {\n  const onStart = (event: HandledEvents) => {\n    const isTouch = \"touches\" in event;\n    // if more than a single touch don't track, for now...\n    if (isTouch && event.touches.length > 1) return;\n\n    set((state, props) => {\n      // setup mouse listeners on document to track swipe since swipe can leave container\n      if (props.trackMouse && !isTouch) {\n        document.addEventListener(mouseMove, onMove);\n        document.addEventListener(mouseUp, onUp);\n      }\n      const { clientX, clientY } = isTouch ? event.touches[0] : event;\n      const xy = rotateXYByAngle([clientX, clientY], props.rotationAngle);\n\n      props.onTouchStartOrOnMouseDown &&\n        props.onTouchStartOrOnMouseDown({ event });\n\n      return {\n        ...state,\n        ...initialState,\n        initial: xy.slice() as Vector2,\n        xy,\n        start: event.timeStamp || 0,\n      };\n    });\n  };\n\n  const onMove = (event: HandledEvents) => {\n    set((state, props) => {\n      const isTouch = \"touches\" in event;\n      // Discount a swipe if additional touches are present after\n      // a swipe has started.\n      if (isTouch && event.touches.length > 1) {\n        return state;\n      }\n\n      // if swipe has exceeded duration stop tracking\n      if (event.timeStamp - state.start > props.swipeDuration) {\n        return state.swiping ? { ...state, swiping: false } : state;\n      }\n\n      const { clientX, clientY } = isTouch ? event.touches[0] : event;\n      const [x, y] = rotateXYByAngle([clientX, clientY], props.rotationAngle);\n      const deltaX = x - state.xy[0];\n      const deltaY = y - state.xy[1];\n      const absX = Math.abs(deltaX);\n      const absY = Math.abs(deltaY);\n      const time = (event.timeStamp || 0) - state.start;\n      const velocity = Math.sqrt(absX * absX + absY * absY) / (time || 1);\n      const vxvy: Vector2 = [deltaX / (time || 1), deltaY / (time || 1)];\n\n      const dir = getDirection(absX, absY, deltaX, deltaY);\n\n      // if swipe is under delta and we have not started to track a swipe: skip update\n      const delta =\n        typeof props.delta === \"number\"\n          ? props.delta\n          : props.delta[dir.toLowerCase() as Lowercase<SwipeDirections>] ||\n            defaultProps.delta;\n      if (absX < delta && absY < delta && !state.swiping) return state;\n\n      const eventData = {\n        absX,\n        absY,\n        deltaX,\n        deltaY,\n        dir,\n        event,\n        first: state.first,\n        initial: state.initial,\n        velocity,\n        vxvy,\n      };\n\n      // call onSwipeStart if present and is first swipe event\n      eventData.first && props.onSwipeStart && props.onSwipeStart(eventData);\n\n      // call onSwiping if present\n      props.onSwiping && props.onSwiping(eventData);\n\n      // track if a swipe is cancelable (handler for swiping or swiped(dir) exists)\n      // so we can call preventDefault if needed\n      let cancelablePageSwipe = false;\n      if (\n        props.onSwiping ||\n        props.onSwiped ||\n        props[`onSwiped${dir}` as keyof SwipeableDirectionCallbacks]\n      ) {\n        cancelablePageSwipe = true;\n      }\n\n      if (\n        cancelablePageSwipe &&\n        props.preventScrollOnSwipe &&\n        props.trackTouch &&\n        event.cancelable\n      ) {\n        event.preventDefault();\n      }\n\n      return {\n        ...state,\n        // first is now always false\n        first: false,\n        eventData,\n        swiping: true,\n      };\n    });\n  };\n\n  const onEnd = (event: HandledEvents) => {\n    set((state, props) => {\n      let eventData: SwipeEventData | undefined;\n      if (state.swiping && state.eventData) {\n        // if swipe is less than duration fire swiped callbacks\n        if (event.timeStamp - state.start < props.swipeDuration) {\n          eventData = { ...state.eventData, event };\n          props.onSwiped && props.onSwiped(eventData);\n\n          const onSwipedDir =\n            props[\n              `onSwiped${eventData.dir}` as keyof SwipeableDirectionCallbacks\n            ];\n          onSwipedDir && onSwipedDir(eventData);\n        }\n      } else {\n        props.onTap && props.onTap({ event });\n      }\n\n      props.onTouchEndOrOnMouseUp && props.onTouchEndOrOnMouseUp({ event });\n\n      return { ...state, ...initialState, eventData };\n    });\n  };\n\n  const cleanUpMouse = () => {\n    // safe to just call removeEventListener\n    document.removeEventListener(mouseMove, onMove);\n    document.removeEventListener(mouseUp, onUp);\n  };\n\n  const onUp = (e: HandledEvents) => {\n    cleanUpMouse();\n    onEnd(e);\n  };\n\n  /**\n   * The value of passive on touchMove depends on `preventScrollOnSwipe`:\n   * - true => { passive: false }\n   * - false => { passive: true } // Default\n   *\n   * NOTE: When preventScrollOnSwipe is true, we attempt to call preventDefault to prevent scroll.\n   *\n   * props.touchEventOptions can also be set for all touch event listeners,\n   * but for `touchmove` specifically when `preventScrollOnSwipe` it will\n   * supersede and force passive to false.\n   *\n   */\n  const attachTouch: AttachTouch = (el, props) => {\n    let cleanup = () => {};\n    if (el && el.addEventListener) {\n      const baseOptions = {\n        ...defaultProps.touchEventOptions,\n        ...props.touchEventOptions,\n      };\n      // attach touch event listeners and handlers\n      const tls: [\n        typeof touchStart | typeof touchMove | typeof touchEnd,\n        (e: HandledEvents) => void,\n        { passive: boolean }\n      ][] = [\n        [touchStart, onStart, baseOptions],\n        // preventScrollOnSwipe option supersedes touchEventOptions.passive\n        [\n          touchMove,\n          onMove,\n          {\n            ...baseOptions,\n            ...(props.preventScrollOnSwipe ? { passive: false } : {}),\n          },\n        ],\n        [touchEnd, onEnd, baseOptions],\n      ];\n      tls.forEach(([e, h, o]) => el.addEventListener(e, h, o));\n      // return properly scoped cleanup method for removing listeners, options not required\n      cleanup = () => tls.forEach(([e, h]) => el.removeEventListener(e, h));\n    }\n    return cleanup;\n  };\n\n  const onRef = (el: HTMLElement | null) => {\n    // \"inline\" ref functions are called twice on render, once with null then again with DOM element\n    // ignore null here\n    if (el === null) return;\n    set((state, props) => {\n      // if the same DOM el as previous just return state\n      if (state.el === el) return state;\n\n      const addState: { cleanUpTouch?: () => void } = {};\n      // if new DOM el clean up old DOM and reset cleanUpTouch\n      if (state.el && state.el !== el && state.cleanUpTouch) {\n        state.cleanUpTouch();\n        addState.cleanUpTouch = void 0;\n      }\n      // only attach if we want to track touch\n      if (props.trackTouch && el) {\n        addState.cleanUpTouch = attachTouch(el, props);\n      }\n\n      // store event attached DOM el for comparison, clean up, and re-attachment\n      return { ...state, el, ...addState };\n    });\n  };\n\n  // set ref callback to attach touch event listeners\n  const output: { ref: typeof onRef; onMouseDown?: typeof onStart } = {\n    ref: onRef,\n  };\n\n  // if track mouse attach mouse down listener\n  if (handlerProps.trackMouse) {\n    output.onMouseDown = onStart;\n  }\n\n  return [output, attachTouch];\n}\n\nfunction updateTransientState(\n  state: SwipeableState,\n  props: SwipeablePropsWithDefaultOptions,\n  previousProps: SwipeablePropsWithDefaultOptions,\n  attachTouch: AttachTouch\n) {\n  // if trackTouch is off or there is no el, then remove handlers if necessary and exit\n  if (!props.trackTouch || !state.el) {\n    if (state.cleanUpTouch) {\n      state.cleanUpTouch();\n    }\n\n    return {\n      ...state,\n      cleanUpTouch: undefined,\n    };\n  }\n\n  // trackTouch is on, so if there are no handlers attached, attach them and exit\n  if (!state.cleanUpTouch) {\n    return {\n      ...state,\n      cleanUpTouch: attachTouch(state.el, props),\n    };\n  }\n\n  // trackTouch is on and handlers are already attached, so if preventScrollOnSwipe changes value,\n  // remove and reattach handlers (this is required to update the passive option when attaching\n  // the handlers)\n  if (\n    props.preventScrollOnSwipe !== previousProps.preventScrollOnSwipe ||\n    props.touchEventOptions.passive !== previousProps.touchEventOptions.passive\n  ) {\n    state.cleanUpTouch();\n\n    return {\n      ...state,\n      cleanUpTouch: attachTouch(state.el, props),\n    };\n  }\n\n  return state;\n}\n\nexport function useSwipeable(options: SwipeableProps): SwipeableHandlers {\n  const { trackMouse } = options;\n  const transientState = React.useRef({ ...initialState });\n  const transientProps = React.useRef<SwipeablePropsWithDefaultOptions>({\n    ...defaultProps,\n  });\n\n  // track previous rendered props\n  const previousProps = React.useRef<SwipeablePropsWithDefaultOptions>({\n    ...transientProps.current,\n  });\n  previousProps.current = { ...transientProps.current };\n\n  // update current render props & defaults\n  transientProps.current = {\n    ...defaultProps,\n    ...options,\n  };\n  // Force defaults for config properties\n  let defaultKey: keyof ConfigurationOptions;\n  for (defaultKey in defaultProps) {\n    if (transientProps.current[defaultKey] === void 0) {\n      (transientProps.current[defaultKey] as any) = defaultProps[defaultKey];\n    }\n  }\n\n  const [handlers, attachTouch] = React.useMemo(\n    () =>\n      getHandlers(\n        (stateSetter) =>\n          (transientState.current = stateSetter(\n            transientState.current,\n            transientProps.current\n          )),\n        { trackMouse }\n      ),\n    [trackMouse]\n  );\n\n  transientState.current = updateTransientState(\n    transientState.current,\n    transientProps.current,\n    previousProps.current,\n    attachTouch\n  );\n\n  return handlers;\n}\n","import React, { useState, useEffect, createRef, Suspense } from \"react\";\nimport \"./style.css\";\n//   a,\n//   useSpring,\n//   useSprings,\n//   useSpringRef,\n//   useTransition,\n// } from \"react-spring\";\nimport { a, easings } from \"react-spring\";\nimport { useSpring, useSprings, a as Animated } from \"@react-spring/three\";\nimport { data } from \"../../../../data\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useSwipeable } from \"react-swipeable\";\n// import Loader from \"../Loader\";\n\nconst Scene = React.lazy(() => import(\"./scene\"));\n\nfunction Home({ current, setCurrent, basename }) {\n  //Startup Function\n  const [loaded, setLoaded] = useState(false);\n\n  let modelcount = [];\n  const [models, setModels] = useState([]);\n\n  useEffect(() => {\n    //Setting Grouped Refs\n\n    {\n      data.map((el, i) => {\n        let count = 0;\n        modelcount.push(count + i);\n      });\n    }\n    setModels((models) =>\n      Array(modelcount.length)\n        .fill()\n        .map((el, i) => models[i] || createRef())\n    );\n\n    setLoaded(true);\n  }, []);\n\n  //Selecting Page\n  const handleNext = () => {\n    if (current >= models.length - 1) {\n      setCurrent(0);\n    }\n    if (current < models.length - 1) {\n      setCurrent(current + 1);\n    }\n  };\n  const handlePrev = () => {\n    if (current <= 0) {\n      setCurrent(models.length - 1);\n    }\n    if (current > 0) {\n      setCurrent(current - 1);\n    }\n  };\n\n  // Navigating to Page\n  const navigate = useNavigate();\n  const handleEnter = () => {\n    navigate(`${data[current].id}`);\n  };\n  // Swipeable\n  const handlers = useSwipeable({\n    onSwipedLeft: () => handleNext(),\n    onSwipedRight: () => handlePrev(),\n  });\n\n  // Animations\n  const slideup = useSpring({\n    opacity: loaded ? 1 : 0,\n    transform: loaded ? \"translateY(0vh)\" : \"translateY(100vh)\",\n    delay: 100,\n    config: {\n      duration: 1200,\n      tension: 120,\n      friction: 14,\n      easing: easings.easeInBounce,\n    },\n  });\n\n  const line1 = useSpring({\n    from: { opacity: 0, transform: \"translateY(20px)\" },\n    to: { opacity: 1, transform: \"translateY(0px)\" },\n    // delay: 300,\n    delay: 1150,\n    config: { duration: 350, tension: 120, friction: 14 },\n  });\n  const line2 = useSpring({\n    from: {\n      opacity: 0,\n      transform: \"translateY(20px)\",\n    },\n    to: { opacity: 1, transform: \"translateY(0px)\" },\n    // delay: 400,\n    delay: 1300,\n\n    config: { duration: 350, tension: 120, friction: 14 },\n  });\n  const line3 = useSpring({\n    from: {\n      opacity: 0,\n      transform: \"translateY(20px)\",\n    },\n    to: { opacity: 1, transform: \"translateY(0px)\" },\n    // delay: 400,\n    delay: 1450,\n\n    config: { duration: 350, tension: 120, friction: 14 },\n  });\n\n  const textSprings = useSprings(\n    models.length,\n    models.map((el, i) =>\n      i === current\n        ? {\n            from: { opacity: 0 },\n            to: { opacity: 1 },\n          }\n        : {\n            from: { opacity: 1 },\n            to: { opacity: 0 },\n          }\n    )\n  );\n  const indexSprings = useSprings(\n    models.length,\n    models.map((el, i) =>\n      i === current\n        ? {\n            from: { opacity: 0.1 },\n            to: { opacity: 1 },\n          }\n        : {\n            from: { opacity: 1 },\n            to: { opacity: 0.1 },\n          }\n    )\n  );\n\n  const scene = {\n    models: models,\n    current: current,\n    loaded: loaded,\n    setLoaded: setLoaded,\n  };\n\n  let count = -1;\n  return (\n    <div id=\"home\">\n      <a.div className=\"section-wrap\" style={slideup} {...handlers}>\n        <div className=\"info-c\">\n          {data.map((el, i) => {\n            if (el.type === \"view\") {\n              count++;\n              return (\n                <a.div className=\"text-c\" key={i} style={textSprings[count]}>\n                  <a.h6\n                    className=\"title\"\n                    style={line1}\n                    onClick={() => handleEnter()}\n                  >\n                    {el.title}\n                  </a.h6>\n                  <a.p className=\"text\" style={line2}>\n                    {el.text}\n                  </a.p>\n                </a.div>\n              );\n            }\n          })}\n        </div>\n        <a.div className=\"row\" style={line3}>\n          <div className=\"order-btns\">\n            <div className=\"order-btn prev\" onClick={() => handlePrev()}>\n              <p>Prev</p>\n            </div>\n            <div className=\"order-btn\">\n              <p>/</p>\n            </div>\n            <div className=\"order-btn next\" onClick={() => handleNext()}>\n              <p>Next</p>\n            </div>\n          </div>\n          <ul className=\"index-c\">\n            {indexSprings.map((el, i) => {\n              return (\n                <a.div\n                  className=\"index\"\n                  key={i}\n                  style={indexSprings[i]}\n                  onClick={() => setCurrent(i)}\n                >\n                  <div className=\"index-line\" />\n                </a.div>\n              );\n            })}\n          </ul>\n        </a.div>\n      </a.div>\n      <Suspense fallback={<p>loading</p>}>\n        <Scene {...scene} />\n      </Suspense>\n    </div>\n  );\n}\n\nexport default Home;\n"],"names":["LEFT","RIGHT","UP","DOWN","defaultProps","delta","preventScrollOnSwipe","rotationAngle","trackMouse","trackTouch","swipeDuration","Infinity","touchEventOptions","passive","initialState","first","initial","start","swiping","xy","mouseMove","mouseUp","touchEnd","touchMove","touchStart","rotateXYByAngle","pos","angle","angleInRadians","Math","PI","cos","sin","getHandlers","set","handlerProps","onStart","event","isTouch","touches","length","state","props","document","addEventListener","onMove","onUp","_ref","clientX","clientY","onTouchStartOrOnMouseDown","Object","assign","slice","timeStamp","_ref2","_rotateXYByAngle","_rotateXYByAngle2","_slicedToArray","x","y","deltaX","deltaY","absX","abs","absY","time","velocity","sqrt","vxvy","dir","getDirection","toLowerCase","eventData","onSwipeStart","onSwiping","cancelablePageSwipe","onSwiped","concat","cancelable","preventDefault","onEnd","onSwipedDir","onTap","onTouchEndOrOnMouseUp","cleanUpMouse","removeEventListener","e","attachTouch","el","cleanup","baseOptions","tls","forEach","_ref3","_ref4","h","o","_ref5","_ref6","output","ref","addState","cleanUpTouch","onMouseDown","useSwipeable","options","defaultKey","transientState","React","transientProps","previousProps","current","_React$useMemo","stateSetter","_React$useMemo2","handlers","undefined","updateTransientState","Scene","setCurrent","_useState","basename","useState","_useState2","loaded","setLoaded","modelcount","_useState3","_useState4","models","setModels","useEffect","data","map","i","push","Array","fill","createRef","handleNext","handlePrev","navigate","useNavigate","onSwipedLeft","onSwipedRight","slideup","useSpring","opacity","transform","delay","config","duration","tension","friction","easing","easings","easeInBounce","line1","from","to","line2","line3","textSprings","useSprings","indexSprings","scene","count","_jsxs","id","children","a","div","_objectSpread","className","style","_jsx","type","h6","onClick","title","p","text","Suspense","fallback"],"sourceRoot":""}